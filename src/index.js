/**
 * WordPress dependencies
 */
import { registerPlugin } from '@wordpress/plugins'
import { subscribe, select, dispatch } from '@wordpress/data'
import domReady from '@wordpress/dom-ready'
import { SidebarSettings } from './components/Settings'

/**
 * External dependencies
 */
import { fixIt } from './app/fix'
import { regs, processedBlocks, regsWithPair } from './app/rules'
import { getAllInnersFromParents } from './app/helpers'
import { isUsedByLocale } from './app/controls'
import { getCurrentUserSettings } from './app/data'

let contentPasted = false

let theRegs = []

const { getBlocks, getSelectedBlockClientId, isTyping, getBlockAttributes } = select( 'core/block-editor' )
const { getEntityRecord } = select( 'core' )
const { updateBlockAttributes } = dispatch( 'core/block-editor' )

registerPlugin( 'consistency-custom-sidebar', {
    render: SidebarSettings,
} )

domReady( () => {

	// This global makes it possible to count the loops on the regex in order to trigger a cut on a possible infinite loop
	global.consistencyLoop = 0

	global.consistencyHistory = false
	global.consistencyHistoryLastChar = ''

	// Fix all blocks in post: only used in content copy/paste
	const fixAll = () => {
		// Get all blocks generated by pasting (which does not integrate innerBlocks)
		const allBlocks = getBlocks()

		// Get all innerBlocks for a later bulk selection process that will generate their fix
		const allInners = getAllInnersFromParents( allBlocks )
	
		// Fixes all parents blocks
		const updates = allBlocks.reduce( ( acc, block ) => {

			let newContent = block.attributes?.content

			if ( ! processedBlocks.includes( block.name )
				|| undefined === newContent ) {
				return acc
			}

			Object.entries( theRegs ).forEach( ( [ _, reg ] ) => {

				if ( isUsedByLocale( reg.name ) && regsWithPair.includes( reg.name ) ) {
					const singleCharacterOfPair = reg.mask.toString().match( /(?<=\/).+?(?=\/)/g )[0]
					const realReg = new RegExp( `/(?<!\=)${singleCharacterOfPair}(?!>)([^${singleCharacterOfPair}]*)(?<!\=)${singleCharacterOfPair}(?!>)/`, 'g' )
					newContent = newContent.replaceAll( realReg, reg.replace )
				}

				if ( isUsedByLocale( reg.name ) && ! regsWithPair.includes( reg.name ) ) {
					const stringRegex = reg.mask.toString()
					const regWithGlobalFlag = new RegExp( stringRegex.substring( 1, stringRegex.length - 1 ), 'g' )
					newContent = newContent.replaceAll( regWithGlobalFlag, reg.replace )
				}

			} )

			if ( undefined !== newContent ) {
				acc[ block.clientId ] = { content: newContent }
			}
			return acc
		}, {} )

		// Update all parents blocks
		if ( Object.keys( updates ).length && contentPasted ) {
			contentPasted = false
			updateBlockAttributes( Object.keys( updates ), updates, true )
		}

		contentPasted = false

		// Select all innerBlocks to trigger their correction, then deselect all by selecting the first block
		const isPasting = true
		allInners.forEach( block => { 
			if ( ! processedBlocks.includes( block.name ) ) return
			const currentBlockId = block.clientId
			block?.clientId && fixIt( { currentBlockId, theRegs, isPasting } )
		} )
	}

	// Intercept clipboard paste to fix all new blocks
	document.querySelector( '#editor' )?.addEventListener( 'paste', e => {
		contentPasted = true
		e.preventDefault()
	} )

	document.querySelector( '#editor' )?.addEventListener( 'keydown', e => {
		if ( 90 === e.keyCode && ( e.ctrlKey || e.metaKey ) ) {
			console.log('CTRL Z');
			e.preventDefault()
		}
	} )

	// Letâ€™s listen for state changes
	subscribe( () => {

		// Get current user settings
		const { onTheFly, onPaste } = getCurrentUserSettings()

		// If everything is disabled, nothing is done
		if ( ! onTheFly && ! onPaste ) return

		// Get Global settings from site entity
		const siteEntity = getEntityRecord( 'root', 'site' )
		const settings = siteEntity?.consistency_plugin_settings
		if ( undefined === settings ) return
	
		// Get the regex of all rules
		theRegs = regs.filter( reg => true === settings?.find( s => s.slug === reg.name )?.value )

		// Manage clipboard and fix all blocks
		if ( contentPasted && onPaste ) {
			fixAll()
			return
		}

		// Get current selected block
		const currentBlockId = getSelectedBlockClientId()

		// Stop here if everything is disabled
		if ( null === currentBlockId || contentPasted || ! onTheFly ) return

		// Don't try to fix block content if nothing has changed in content
		const blockAttributes = getBlockAttributes( currentBlockId )
		if ( blockAttributes.hasOwnProperty( 'content' ) && global.consistencyHistoryLastChar === blockAttributes.content.charAt( blockAttributes.content.length - 1 ) ) {
			return
		}
		global.consistencyHistoryLastChar = blockAttributes.content.charAt( blockAttributes.content.length - 1 )
		
		// Fixes the typography of current selected block
		const isPasting = false
		theRegs && isTyping() && fixIt( { currentBlockId, theRegs, isPasting } )
	
	} )
} )

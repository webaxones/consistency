/**
 * @summary: Editor effects.
 * 
 * This hook is used to subscribe to state changes in the editor
 * and to fix the content of the current selected block or all blocks
 * generated by pasting.
 * 
 * @return {void}
 */

/**
 * WordPress dependencies
 */
import { useContext, useEffect } from '@wordpress/element'
import { subscribe, select } from '@wordpress/data'

/**
 * External dependencies
 */
import GlobalContext from '../contexts/GlobalContext'
import { fixIt, fixAll } from '../app/fixes'
import { fetchCurrentUserSettings } from '../app/data'
import { moveCursorToNewPosition, getLocalizedRuleSettings } from '../app/helpers'

// Get the current selected block and its attributes
const { getSelectedBlockClientId, isTyping, getBlockAttributes } = select( 'core/block-editor' )

const useEditorEffects = () => {
	/**
	 * Global variables in global context
	 */
	const { 
		isPreviousFixCanceled,
		setPreviousFixCanceled,
		previousFixCanceledContent,
		setPreviousFixCanceledContent,
		blocksToBeProcessed,
		cursorOffsetRef,
		isContentPastedRef
	} = useContext( GlobalContext )

	// Initialize the cursorOffset variable if it is undefined
	cursorOffsetRef.current = cursorOffsetRef.current || 0

	// Initialize the isContentPastedRef variable if it is undefined
	isContentPastedRef.current = isContentPastedRef.current || false

	useEffect( () => {

		// Letâ€™s listen for state changes
		const unsubscribe = subscribe( () => {

			// Get current user settings to check if we have to fix the content or to stop here
			const { onTheFly, onPaste } = fetchCurrentUserSettings()
			if ( ! onTheFly && ! onPaste ) return

			// Get fixing rules from site entity global settings
			const localizedRuleSettings = getLocalizedRuleSettings()
			if ( localizedRuleSettings === undefined ) return

			// If onPaste setting is enabled and if content has been copied/pasted generating blocks, we fix all blocks then stop here
			if ( onPaste && isContentPastedRef.current === true ) {
				isContentPastedRef.current = false
				fixAll( { isPreviousFixCanceled, setPreviousFixCanceled, blocksToBeProcessed, cursorOffsetRef } )
				return
			}

			// Get current selected block
			const currentBlockId = getSelectedBlockClientId()

			// Stop here if no block is selected or if fixing on the fly is disabled
			if ( currentBlockId === null || ! onTheFly ) return

			// Don't try to fix block content if nothing has changed
			const blockAttributes = getBlockAttributes( currentBlockId )
			if ( ! blockAttributes ) return
			
			if ( blockAttributes.hasOwnProperty( 'content' ) && previousFixCanceledContent === blockAttributes.content ) {
				return
			}

			// Store the block content to avoid fixing it twice at the next state change
			setPreviousFixCanceledContent( blockAttributes.content )

			// Fix the current selected block
			isTyping() && fixIt( { currentBlockId, isPreviousFixCanceled, setPreviousFixCanceled, blocksToBeProcessed, cursorOffsetRef } )

		} )

		// Unsubscribe when the component is unmounted
		return () => { 
			unsubscribe()
			
			// Move cursor to the new position
			moveCursorToNewPosition( cursorOffsetRef.current )

			// Reset cursorOffsetRef
			cursorOffsetRef.current = 0
		}

	}, [ isPreviousFixCanceled, setPreviousFixCanceled, previousFixCanceledContent, setPreviousFixCanceledContent, blocksToBeProcessed, cursorOffsetRef, isContentPastedRef ] )
}

export default useEditorEffects
